// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/opentrx/seata-golang/v2/pkg/tc/holder (interfaces: SessionHolderInterface)

// Package testdata is a generated GoMock package.
package testdata

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	apis "github.com/opentrx/seata-golang/v2/pkg/apis"
	model "github.com/opentrx/seata-golang/v2/pkg/tc/model"
)

// MockSessionHolderInterface is a mock of SessionHolderInterface interface.
type MockSessionHolderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSessionHolderInterfaceMockRecorder
}

// MockSessionHolderInterfaceMockRecorder is the mock recorder for MockSessionHolderInterface.
type MockSessionHolderInterfaceMockRecorder struct {
	mock *MockSessionHolderInterface
}

// NewMockSessionHolderInterface creates a new mock instance.
func NewMockSessionHolderInterface(ctrl *gomock.Controller) *MockSessionHolderInterface {
	mock := &MockSessionHolderInterface{ctrl: ctrl}
	mock.recorder = &MockSessionHolderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionHolderInterface) EXPECT() *MockSessionHolderInterfaceMockRecorder {
	return m.recorder
}

// AddBranchSession mocks base method.
func (m *MockSessionHolderInterface) AddBranchSession(arg0 *apis.GlobalSession, arg1 *apis.BranchSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBranchSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBranchSession indicates an expected call of AddBranchSession.
func (mr *MockSessionHolderInterfaceMockRecorder) AddBranchSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBranchSession", reflect.TypeOf((*MockSessionHolderInterface)(nil).AddBranchSession), arg0, arg1)
}

// AddGlobalSession mocks base method.
func (m *MockSessionHolderInterface) AddGlobalSession(arg0 *apis.GlobalSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGlobalSession", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGlobalSession indicates an expected call of AddGlobalSession.
func (mr *MockSessionHolderInterfaceMockRecorder) AddGlobalSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGlobalSession", reflect.TypeOf((*MockSessionHolderInterface)(nil).AddGlobalSession), arg0)
}

// AllSessions mocks base method.
func (m *MockSessionHolderInterface) AllSessions() []*apis.GlobalSession {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllSessions")
	ret0, _ := ret[0].([]*apis.GlobalSession)
	return ret0
}

// AllSessions indicates an expected call of AllSessions.
func (mr *MockSessionHolderInterfaceMockRecorder) AllSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllSessions", reflect.TypeOf((*MockSessionHolderInterface)(nil).AllSessions))
}

// FindAsyncCommittingGlobalTransactions mocks base method.
func (m *MockSessionHolderInterface) FindAsyncCommittingGlobalTransactions(arg0 []string) []*model.GlobalTransaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAsyncCommittingGlobalTransactions", arg0)
	ret0, _ := ret[0].([]*model.GlobalTransaction)
	return ret0
}

// FindAsyncCommittingGlobalTransactions indicates an expected call of FindAsyncCommittingGlobalTransactions.
func (mr *MockSessionHolderInterfaceMockRecorder) FindAsyncCommittingGlobalTransactions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAsyncCommittingGlobalTransactions", reflect.TypeOf((*MockSessionHolderInterface)(nil).FindAsyncCommittingGlobalTransactions), arg0)
}

// FindBranchSession mocks base method.
func (m *MockSessionHolderInterface) FindBranchSession(arg0 string) []*apis.BranchSession {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBranchSession", arg0)
	ret0, _ := ret[0].([]*apis.BranchSession)
	return ret0
}

// FindBranchSession indicates an expected call of FindBranchSession.
func (mr *MockSessionHolderInterfaceMockRecorder) FindBranchSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBranchSession", reflect.TypeOf((*MockSessionHolderInterface)(nil).FindBranchSession), arg0)
}

// FindGlobalSession mocks base method.
func (m *MockSessionHolderInterface) FindGlobalSession(arg0 string) *apis.GlobalSession {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGlobalSession", arg0)
	ret0, _ := ret[0].(*apis.GlobalSession)
	return ret0
}

// FindGlobalSession indicates an expected call of FindGlobalSession.
func (mr *MockSessionHolderInterfaceMockRecorder) FindGlobalSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGlobalSession", reflect.TypeOf((*MockSessionHolderInterface)(nil).FindGlobalSession), arg0)
}

// FindGlobalSessions mocks base method.
func (m *MockSessionHolderInterface) FindGlobalSessions(arg0 []apis.GlobalSession_GlobalStatus) []*apis.GlobalSession {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGlobalSessions", arg0)
	ret0, _ := ret[0].([]*apis.GlobalSession)
	return ret0
}

// FindGlobalSessions indicates an expected call of FindGlobalSessions.
func (mr *MockSessionHolderInterfaceMockRecorder) FindGlobalSessions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGlobalSessions", reflect.TypeOf((*MockSessionHolderInterface)(nil).FindGlobalSessions), arg0)
}

// FindGlobalTransaction mocks base method.
func (m *MockSessionHolderInterface) FindGlobalTransaction(arg0 string) *model.GlobalTransaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGlobalTransaction", arg0)
	ret0, _ := ret[0].(*model.GlobalTransaction)
	return ret0
}

// FindGlobalTransaction indicates an expected call of FindGlobalTransaction.
func (mr *MockSessionHolderInterfaceMockRecorder) FindGlobalTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGlobalTransaction", reflect.TypeOf((*MockSessionHolderInterface)(nil).FindGlobalTransaction), arg0)
}

// FindRetryCommittingGlobalTransactions mocks base method.
func (m *MockSessionHolderInterface) FindRetryCommittingGlobalTransactions(arg0 []string) []*model.GlobalTransaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRetryCommittingGlobalTransactions", arg0)
	ret0, _ := ret[0].([]*model.GlobalTransaction)
	return ret0
}

// FindRetryCommittingGlobalTransactions indicates an expected call of FindRetryCommittingGlobalTransactions.
func (mr *MockSessionHolderInterfaceMockRecorder) FindRetryCommittingGlobalTransactions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRetryCommittingGlobalTransactions", reflect.TypeOf((*MockSessionHolderInterface)(nil).FindRetryCommittingGlobalTransactions), arg0)
}

// FindRetryRollbackGlobalTransactions mocks base method.
func (m *MockSessionHolderInterface) FindRetryRollbackGlobalTransactions(arg0 []string) []*model.GlobalTransaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRetryRollbackGlobalTransactions", arg0)
	ret0, _ := ret[0].([]*model.GlobalTransaction)
	return ret0
}

// FindRetryRollbackGlobalTransactions indicates an expected call of FindRetryRollbackGlobalTransactions.
func (mr *MockSessionHolderInterfaceMockRecorder) FindRetryRollbackGlobalTransactions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRetryRollbackGlobalTransactions", reflect.TypeOf((*MockSessionHolderInterface)(nil).FindRetryRollbackGlobalTransactions), arg0)
}

// InactiveGlobalSession mocks base method.
func (m *MockSessionHolderInterface) InactiveGlobalSession(arg0 *apis.GlobalSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InactiveGlobalSession", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InactiveGlobalSession indicates an expected call of InactiveGlobalSession.
func (mr *MockSessionHolderInterfaceMockRecorder) InactiveGlobalSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InactiveGlobalSession", reflect.TypeOf((*MockSessionHolderInterface)(nil).InactiveGlobalSession), arg0)
}

// RemoveBranchSession mocks base method.
func (m *MockSessionHolderInterface) RemoveBranchSession(arg0 *apis.GlobalSession, arg1 *apis.BranchSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBranchSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBranchSession indicates an expected call of RemoveBranchSession.
func (mr *MockSessionHolderInterfaceMockRecorder) RemoveBranchSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBranchSession", reflect.TypeOf((*MockSessionHolderInterface)(nil).RemoveBranchSession), arg0, arg1)
}

// RemoveGlobalSession mocks base method.
func (m *MockSessionHolderInterface) RemoveGlobalSession(arg0 *apis.GlobalSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveGlobalSession", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveGlobalSession indicates an expected call of RemoveGlobalSession.
func (mr *MockSessionHolderInterfaceMockRecorder) RemoveGlobalSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGlobalSession", reflect.TypeOf((*MockSessionHolderInterface)(nil).RemoveGlobalSession), arg0)
}

// RemoveGlobalTransaction mocks base method.
func (m *MockSessionHolderInterface) RemoveGlobalTransaction(arg0 *model.GlobalTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveGlobalTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveGlobalTransaction indicates an expected call of RemoveGlobalTransaction.
func (mr *MockSessionHolderInterfaceMockRecorder) RemoveGlobalTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGlobalTransaction", reflect.TypeOf((*MockSessionHolderInterface)(nil).RemoveGlobalTransaction), arg0)
}

// UpdateBranchSessionStatus mocks base method.
func (m *MockSessionHolderInterface) UpdateBranchSessionStatus(arg0 *apis.BranchSession, arg1 apis.BranchSession_BranchStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBranchSessionStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBranchSessionStatus indicates an expected call of UpdateBranchSessionStatus.
func (mr *MockSessionHolderInterfaceMockRecorder) UpdateBranchSessionStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBranchSessionStatus", reflect.TypeOf((*MockSessionHolderInterface)(nil).UpdateBranchSessionStatus), arg0, arg1)
}

// UpdateGlobalSessionStatus mocks base method.
func (m *MockSessionHolderInterface) UpdateGlobalSessionStatus(arg0 *apis.GlobalSession, arg1 apis.GlobalSession_GlobalStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlobalSessionStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGlobalSessionStatus indicates an expected call of UpdateGlobalSessionStatus.
func (mr *MockSessionHolderInterfaceMockRecorder) UpdateGlobalSessionStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalSessionStatus", reflect.TypeOf((*MockSessionHolderInterface)(nil).UpdateGlobalSessionStatus), arg0, arg1)
}
