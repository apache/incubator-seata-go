// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: pkg/datasource/sql/undo/parser/branch_undo_log.proto

package parser

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IndexType int32

const (
	IndexType_IndexTypeNull       IndexType = 0
	IndexType_IndexTypePrimaryKey IndexType = 1
)

// Enum value maps for IndexType.
var (
	IndexType_name = map[int32]string{
		0: "IndexTypeNull",
		1: "IndexTypePrimaryKey",
	}
	IndexType_value = map[string]int32{
		"IndexTypeNull":       0,
		"IndexTypePrimaryKey": 1,
	}
)

func (x IndexType) Enum() *IndexType {
	p := new(IndexType)
	*p = x
	return p
}

func (x IndexType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_enumTypes[0].Descriptor()
}

func (IndexType) Type() protoreflect.EnumType {
	return &file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_enumTypes[0]
}

func (x IndexType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexType.Descriptor instead.
func (IndexType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_rawDescGZIP(), []int{0}
}

type JDBCType int32

const (
	JDBCType_JDBCTypeNull                  JDBCType = 0
	JDBCType_JDBCTypeBit                   JDBCType = -7
	JDBCType_JDBCTypeTinyInt               JDBCType = -6
	JDBCType_JDBCTypeSmallInt              JDBCType = 5
	JDBCType_JDBCTypeInteger               JDBCType = 4
	JDBCType_JDBCTypeBigInt                JDBCType = -5
	JDBCType_JDBCTypeFloat                 JDBCType = 6
	JDBCType_JDBCTypeReal                  JDBCType = 7
	JDBCType_JDBCTypeDouble                JDBCType = 8
	JDBCType_JDBCTypeNumberic              JDBCType = 2
	JDBCType_JDBCTypeDecimal               JDBCType = 3
	JDBCType_JDBCTypeChar                  JDBCType = 1
	JDBCType_JDBCTypeVarchar               JDBCType = 12
	JDBCType_JDBCTypeLongVarchar           JDBCType = -1
	JDBCType_JDBCTypeDate                  JDBCType = 91
	JDBCType_JDBCTypeTime                  JDBCType = 92
	JDBCType_JDBCTypeTimestamp             JDBCType = 93
	JDBCType_JDBCTypeBinary                JDBCType = -2
	JDBCType_JDBCTypeVarBinary             JDBCType = -3
	JDBCType_JDBCTypeLongVarBinary         JDBCType = -4
	JDBCType_JDBCTypeOther                 JDBCType = 1111
	JDBCType_JDBCTypeJavaObject            JDBCType = 2000
	JDBCType_JDBCTypeDistinct              JDBCType = 2001
	JDBCType_JDBCTypeStruct                JDBCType = 2002
	JDBCType_JDBCTypeArray                 JDBCType = 2003
	JDBCType_JDBCTypeBlob                  JDBCType = 2004
	JDBCType_JDBCTypeClob                  JDBCType = 2005
	JDBCType_JDBCTypeRef                   JDBCType = 2006
	JDBCType_JDBCTypeDateLink              JDBCType = 70
	JDBCType_JDBCTypeBoolean               JDBCType = 16
	JDBCType_JDBCTypeRowID                 JDBCType = -8
	JDBCType_JDBCTypeNchar                 JDBCType = -15
	JDBCType_JDBCTypeNvarchar              JDBCType = -9
	JDBCType_JDBCTypeLongNvVarchar         JDBCType = -16
	JDBCType_JDBCTypeNclob                 JDBCType = 2011
	JDBCType_JDBCTypeSqlXML                JDBCType = 2009
	JDBCType_JDBCTypeRefCursor             JDBCType = 2012
	JDBCType_JDBCTypeTimeWithTimeZone      JDBCType = 2013
	JDBCType_JDBCTypeTimestampWithTimezone JDBCType = 2014
)

// Enum value maps for JDBCType.
var (
	JDBCType_name = map[int32]string{
		0:    "JDBCTypeNull",
		-7:   "JDBCTypeBit",
		-6:   "JDBCTypeTinyInt",
		5:    "JDBCTypeSmallInt",
		4:    "JDBCTypeInteger",
		-5:   "JDBCTypeBigInt",
		6:    "JDBCTypeFloat",
		7:    "JDBCTypeReal",
		8:    "JDBCTypeDouble",
		2:    "JDBCTypeNumberic",
		3:    "JDBCTypeDecimal",
		1:    "JDBCTypeChar",
		12:   "JDBCTypeVarchar",
		-1:   "JDBCTypeLongVarchar",
		91:   "JDBCTypeDate",
		92:   "JDBCTypeTime",
		93:   "JDBCTypeTimestamp",
		-2:   "JDBCTypeBinary",
		-3:   "JDBCTypeVarBinary",
		-4:   "JDBCTypeLongVarBinary",
		1111: "JDBCTypeOther",
		2000: "JDBCTypeJavaObject",
		2001: "JDBCTypeDistinct",
		2002: "JDBCTypeStruct",
		2003: "JDBCTypeArray",
		2004: "JDBCTypeBlob",
		2005: "JDBCTypeClob",
		2006: "JDBCTypeRef",
		70:   "JDBCTypeDateLink",
		16:   "JDBCTypeBoolean",
		-8:   "JDBCTypeRowID",
		-15:  "JDBCTypeNchar",
		-9:   "JDBCTypeNvarchar",
		-16:  "JDBCTypeLongNvVarchar",
		2011: "JDBCTypeNclob",
		2009: "JDBCTypeSqlXML",
		2012: "JDBCTypeRefCursor",
		2013: "JDBCTypeTimeWithTimeZone",
		2014: "JDBCTypeTimestampWithTimezone",
	}
	JDBCType_value = map[string]int32{
		"JDBCTypeNull":                  0,
		"JDBCTypeBit":                   -7,
		"JDBCTypeTinyInt":               -6,
		"JDBCTypeSmallInt":              5,
		"JDBCTypeInteger":               4,
		"JDBCTypeBigInt":                -5,
		"JDBCTypeFloat":                 6,
		"JDBCTypeReal":                  7,
		"JDBCTypeDouble":                8,
		"JDBCTypeNumberic":              2,
		"JDBCTypeDecimal":               3,
		"JDBCTypeChar":                  1,
		"JDBCTypeVarchar":               12,
		"JDBCTypeLongVarchar":           -1,
		"JDBCTypeDate":                  91,
		"JDBCTypeTime":                  92,
		"JDBCTypeTimestamp":             93,
		"JDBCTypeBinary":                -2,
		"JDBCTypeVarBinary":             -3,
		"JDBCTypeLongVarBinary":         -4,
		"JDBCTypeOther":                 1111,
		"JDBCTypeJavaObject":            2000,
		"JDBCTypeDistinct":              2001,
		"JDBCTypeStruct":                2002,
		"JDBCTypeArray":                 2003,
		"JDBCTypeBlob":                  2004,
		"JDBCTypeClob":                  2005,
		"JDBCTypeRef":                   2006,
		"JDBCTypeDateLink":              70,
		"JDBCTypeBoolean":               16,
		"JDBCTypeRowID":                 -8,
		"JDBCTypeNchar":                 -15,
		"JDBCTypeNvarchar":              -9,
		"JDBCTypeLongNvVarchar":         -16,
		"JDBCTypeNclob":                 2011,
		"JDBCTypeSqlXML":                2009,
		"JDBCTypeRefCursor":             2012,
		"JDBCTypeTimeWithTimeZone":      2013,
		"JDBCTypeTimestampWithTimezone": 2014,
	}
)

func (x JDBCType) Enum() *JDBCType {
	p := new(JDBCType)
	*p = x
	return p
}

func (x JDBCType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JDBCType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_enumTypes[1].Descriptor()
}

func (JDBCType) Type() protoreflect.EnumType {
	return &file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_enumTypes[1]
}

func (x JDBCType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JDBCType.Descriptor instead.
func (JDBCType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_rawDescGZIP(), []int{1}
}

type SQLType int32

const (
	SQLType_SQLTypeDefault          SQLType = 0
	SQLType_SQLTypeUnknown          SQLType = 1
	SQLType_SQLTypeSelect           SQLType = 2
	SQLType_SQLTypeInsert           SQLType = 3
	SQLType_SQLTypeUpdate           SQLType = 4
	SQLType_SQLTypeDelete           SQLType = 5
	SQLType_SQLTypeSelectForUpdate  SQLType = 6
	SQLType_SQLTypeReplace          SQLType = 7
	SQLType_SQLTypeTruncate         SQLType = 8
	SQLType_SQLTypeCreate           SQLType = 9
	SQLType_SQLTypeDrop             SQLType = 10
	SQLType_SQLTypeLoad             SQLType = 11
	SQLType_SQLTypeMerge            SQLType = 12
	SQLType_SQLTypeShow             SQLType = 13
	SQLType_SQLTypeAlter            SQLType = 14
	SQLType_SQLTypeRename           SQLType = 15
	SQLType_SQLTypeDump             SQLType = 16
	SQLType_SQLTypeDebug            SQLType = 17
	SQLType_SQLTypeExplain          SQLType = 18
	SQLType_SQLTypeDesc             SQLType = 19
	SQLType_SQLTypeSet              SQLType = 20
	SQLType_SQLTypeReload           SQLType = 21
	SQLType_SQLTypeSelectUnion      SQLType = 22
	SQLType_SQLTypeCreateTable      SQLType = 23
	SQLType_SQLTypeDropTable        SQLType = 24
	SQLType_SQLTypeAlterTable       SQLType = 25
	SQLType_SQLTypeSelectFromUpdate SQLType = 26
	SQLType_SQLTypeMultiDelete      SQLType = 27
	SQLType_SQLTypeMultiUpdate      SQLType = 28
	SQLType_SQLTypeCreateIndex      SQLType = 29
	SQLType_SQLTypeDropIndex        SQLType = 30
	SQLType_SQLTypeMulti            SQLType = 31
)

// Enum value maps for SQLType.
var (
	SQLType_name = map[int32]string{
		0:  "SQLTypeDefault",
		1:  "SQLTypeUnknown",
		2:  "SQLTypeSelect",
		3:  "SQLTypeInsert",
		4:  "SQLTypeUpdate",
		5:  "SQLTypeDelete",
		6:  "SQLTypeSelectForUpdate",
		7:  "SQLTypeReplace",
		8:  "SQLTypeTruncate",
		9:  "SQLTypeCreate",
		10: "SQLTypeDrop",
		11: "SQLTypeLoad",
		12: "SQLTypeMerge",
		13: "SQLTypeShow",
		14: "SQLTypeAlter",
		15: "SQLTypeRename",
		16: "SQLTypeDump",
		17: "SQLTypeDebug",
		18: "SQLTypeExplain",
		19: "SQLTypeDesc",
		20: "SQLTypeSet",
		21: "SQLTypeReload",
		22: "SQLTypeSelectUnion",
		23: "SQLTypeCreateTable",
		24: "SQLTypeDropTable",
		25: "SQLTypeAlterTable",
		26: "SQLTypeSelectFromUpdate",
		27: "SQLTypeMultiDelete",
		28: "SQLTypeMultiUpdate",
		29: "SQLTypeCreateIndex",
		30: "SQLTypeDropIndex",
		31: "SQLTypeMulti",
	}
	SQLType_value = map[string]int32{
		"SQLTypeDefault":          0,
		"SQLTypeUnknown":          1,
		"SQLTypeSelect":           2,
		"SQLTypeInsert":           3,
		"SQLTypeUpdate":           4,
		"SQLTypeDelete":           5,
		"SQLTypeSelectForUpdate":  6,
		"SQLTypeReplace":          7,
		"SQLTypeTruncate":         8,
		"SQLTypeCreate":           9,
		"SQLTypeDrop":             10,
		"SQLTypeLoad":             11,
		"SQLTypeMerge":            12,
		"SQLTypeShow":             13,
		"SQLTypeAlter":            14,
		"SQLTypeRename":           15,
		"SQLTypeDump":             16,
		"SQLTypeDebug":            17,
		"SQLTypeExplain":          18,
		"SQLTypeDesc":             19,
		"SQLTypeSet":              20,
		"SQLTypeReload":           21,
		"SQLTypeSelectUnion":      22,
		"SQLTypeCreateTable":      23,
		"SQLTypeDropTable":        24,
		"SQLTypeAlterTable":       25,
		"SQLTypeSelectFromUpdate": 26,
		"SQLTypeMultiDelete":      27,
		"SQLTypeMultiUpdate":      28,
		"SQLTypeCreateIndex":      29,
		"SQLTypeDropIndex":        30,
		"SQLTypeMulti":            31,
	}
)

func (x SQLType) Enum() *SQLType {
	p := new(SQLType)
	*p = x
	return p
}

func (x SQLType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SQLType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_enumTypes[2].Descriptor()
}

func (SQLType) Type() protoreflect.EnumType {
	return &file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_enumTypes[2]
}

func (x SQLType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SQLType.Descriptor instead.
func (SQLType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_rawDescGZIP(), []int{2}
}

type BranchUndoLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xid      string        `protobuf:"bytes,1,opt,name=Xid,proto3" json:"Xid,omitempty"`
	BranchID uint64        `protobuf:"varint,2,opt,name=BranchID,proto3" json:"BranchID,omitempty"`
	Logs     []*SQLUndoLog `protobuf:"bytes,3,rep,name=Logs,proto3" json:"Logs,omitempty"`
}

func (x *BranchUndoLog) Reset() {
	*x = BranchUndoLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchUndoLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchUndoLog) ProtoMessage() {}

func (x *BranchUndoLog) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchUndoLog.ProtoReflect.Descriptor instead.
func (*BranchUndoLog) Descriptor() ([]byte, []int) {
	return file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_rawDescGZIP(), []int{0}
}

func (x *BranchUndoLog) GetXid() string {
	if x != nil {
		return x.Xid
	}
	return ""
}

func (x *BranchUndoLog) GetBranchID() uint64 {
	if x != nil {
		return x.BranchID
	}
	return 0
}

func (x *BranchUndoLog) GetLogs() []*SQLUndoLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

type SQLUndoLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SQLType     SQLType      `protobuf:"varint,1,opt,name=SQLType,proto3,enum=parser.SQLType" json:"SQLType,omitempty"`
	TableName   string       `protobuf:"bytes,2,opt,name=TableName,proto3" json:"TableName,omitempty"`
	BeforeImage *RecordImage `protobuf:"bytes,3,opt,name=BeforeImage,proto3" json:"BeforeImage,omitempty"`
	AfterImage  *RecordImage `protobuf:"bytes,4,opt,name=AfterImage,proto3" json:"AfterImage,omitempty"`
}

func (x *SQLUndoLog) Reset() {
	*x = SQLUndoLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLUndoLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLUndoLog) ProtoMessage() {}

func (x *SQLUndoLog) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLUndoLog.ProtoReflect.Descriptor instead.
func (*SQLUndoLog) Descriptor() ([]byte, []int) {
	return file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_rawDescGZIP(), []int{1}
}

func (x *SQLUndoLog) GetSQLType() SQLType {
	if x != nil {
		return x.SQLType
	}
	return SQLType_SQLTypeDefault
}

func (x *SQLUndoLog) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *SQLUndoLog) GetBeforeImage() *RecordImage {
	if x != nil {
		return x.BeforeImage
	}
	return nil
}

func (x *SQLUndoLog) GetAfterImage() *RecordImage {
	if x != nil {
		return x.AfterImage
	}
	return nil
}

type RecordImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName string      `protobuf:"bytes,1,opt,name=TableName,proto3" json:"TableName,omitempty"`
	SQLType   SQLType     `protobuf:"varint,2,opt,name=SQLType,proto3,enum=parser.SQLType" json:"SQLType,omitempty"`
	Rows      []*RowImage `protobuf:"bytes,3,rep,name=Rows,proto3" json:"Rows,omitempty"`
}

func (x *RecordImage) Reset() {
	*x = RecordImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordImage) ProtoMessage() {}

func (x *RecordImage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordImage.ProtoReflect.Descriptor instead.
func (*RecordImage) Descriptor() ([]byte, []int) {
	return file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_rawDescGZIP(), []int{2}
}

func (x *RecordImage) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *RecordImage) GetSQLType() SQLType {
	if x != nil {
		return x.SQLType
	}
	return SQLType_SQLTypeDefault
}

func (x *RecordImage) GetRows() []*RowImage {
	if x != nil {
		return x.Rows
	}
	return nil
}

type RowImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns []*structpb.Struct `protobuf:"bytes,1,rep,name=Columns,proto3" json:"Columns,omitempty"`
}

func (x *RowImage) Reset() {
	*x = RowImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowImage) ProtoMessage() {}

func (x *RowImage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowImage.ProtoReflect.Descriptor instead.
func (*RowImage) Descriptor() ([]byte, []int) {
	return file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_rawDescGZIP(), []int{3}
}

func (x *RowImage) GetColumns() []*structpb.Struct {
	if x != nil {
		return x.Columns
	}
	return nil
}

var File_pkg_datasource_sql_undo_parser_branch_undo_log_proto protoreflect.FileDescriptor

var file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_rawDesc = []byte{
	0x0a, 0x34, 0x70, 0x6b, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x75, 0x6e, 0x64, 0x6f, 0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x6c, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x65, 0x0a, 0x0d,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x55, 0x6e, 0x64, 0x6f, 0x4c, 0x6f, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x58, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x58, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x04, 0x4c,
	0x6f, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x53, 0x51, 0x4c, 0x55, 0x6e, 0x64, 0x6f, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x4c,
	0x6f, 0x67, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x0a, 0x53, 0x51, 0x4c, 0x55, 0x6e, 0x64, 0x6f, 0x4c,
	0x6f, 0x67, 0x12, 0x29, 0x0a, 0x07, 0x53, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x51, 0x4c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x53, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x7c, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x53, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53,
	0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x53, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x04, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x52, 0x6f, 0x77, 0x73, 0x22, 0x3d, 0x0a, 0x08, 0x52, 0x6f, 0x77, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x2a, 0x37, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x75,
	0x6c, 0x6c, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70,
	0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x10, 0x01, 0x2a, 0xb4, 0x07,
	0x0a, 0x08, 0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4a, 0x44,
	0x42, 0x43, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x0b,
	0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70, 0x65, 0x42, 0x69, 0x74, 0x10, 0xf9, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1c, 0x0a, 0x0f, 0x4a, 0x44, 0x42, 0x43, 0x54, 0x79,
	0x70, 0x65, 0x54, 0x69, 0x6e, 0x79, 0x49, 0x6e, 0x74, 0x10, 0xfa, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x4a, 0x44,
	0x42, 0x43, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x10, 0x04, 0x12,
	0x1b, 0x0a, 0x0e, 0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70, 0x65, 0x42, 0x69, 0x67, 0x49, 0x6e,
	0x74, 0x10, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x10, 0x06, 0x12,
	0x10, 0x0a, 0x0c, 0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x10,
	0x07, 0x12, 0x12, 0x0a, 0x0e, 0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70, 0x65, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x69, 0x63, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4a,
	0x44, 0x42, 0x43, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61,
	0x72, 0x63, 0x68, 0x61, 0x72, 0x10, 0x0c, 0x12, 0x20, 0x0a, 0x13, 0x4a, 0x44, 0x42, 0x43, 0x54,
	0x79, 0x70, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x10, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4a, 0x44, 0x42,
	0x43, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x65, 0x10, 0x5b, 0x12, 0x10, 0x0a, 0x0c, 0x4a,
	0x44, 0x42, 0x43, 0x54, 0x79, 0x70, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x5c, 0x12, 0x15, 0x0a,
	0x11, 0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x10, 0x5d, 0x12, 0x1b, 0x0a, 0x0e, 0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x10, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x1e, 0x0a, 0x11, 0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x72,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x10, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x22, 0x0a, 0x15, 0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x6f, 0x6e,
	0x67, 0x56, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x10, 0xfc, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70,
	0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0xd7, 0x08, 0x12, 0x17, 0x0a, 0x12, 0x4a, 0x44, 0x42,
	0x43, 0x54, 0x79, 0x70, 0x65, 0x4a, 0x61, 0x76, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10,
	0xd0, 0x0f, 0x12, 0x15, 0x0a, 0x10, 0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70, 0x65, 0x44, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x10, 0xd1, 0x0f, 0x12, 0x13, 0x0a, 0x0e, 0x4a, 0x44, 0x42,
	0x43, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x10, 0xd2, 0x0f, 0x12, 0x12,
	0x0a, 0x0d, 0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x10,
	0xd3, 0x0f, 0x12, 0x11, 0x0a, 0x0c, 0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70, 0x65, 0x42, 0x6c,
	0x6f, 0x62, 0x10, 0xd4, 0x0f, 0x12, 0x11, 0x0a, 0x0c, 0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6c, 0x6f, 0x62, 0x10, 0xd5, 0x0f, 0x12, 0x10, 0x0a, 0x0b, 0x4a, 0x44, 0x42, 0x43,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x10, 0xd6, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x4a, 0x44,
	0x42, 0x43, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x10, 0x46,
	0x12, 0x13, 0x0a, 0x0f, 0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x10, 0x10, 0x12, 0x1a, 0x0a, 0x0d, 0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x6f, 0x77, 0x49, 0x44, 0x10, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x1a, 0x0a, 0x0d, 0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x63, 0x68,
	0x61, 0x72, 0x10, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1d, 0x0a,
	0x10, 0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61,
	0x72, 0x10, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15,
	0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x4e, 0x76, 0x56, 0x61,
	0x72, 0x63, 0x68, 0x61, 0x72, 0x10, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x12, 0x0a, 0x0d, 0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x63, 0x6c, 0x6f,
	0x62, 0x10, 0xdb, 0x0f, 0x12, 0x13, 0x0a, 0x0e, 0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x71, 0x6c, 0x58, 0x4d, 0x4c, 0x10, 0xd9, 0x0f, 0x12, 0x16, 0x0a, 0x11, 0x4a, 0x44, 0x42,
	0x43, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x10, 0xdc,
	0x0f, 0x12, 0x1d, 0x0a, 0x18, 0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x10, 0xdd, 0x0f,
	0x12, 0x22, 0x0a, 0x1d, 0x4a, 0x44, 0x42, 0x43, 0x54, 0x79, 0x70, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x57, 0x69, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x10, 0xde, 0x0f, 0x2a, 0x94, 0x05, 0x0a, 0x07, 0x53, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x51, 0x4c, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x10, 0x03, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10,
	0x04, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x06,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x54,
	0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x51, 0x4c,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x10, 0x0a, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x10, 0x0b, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x10, 0x0c,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x10,
	0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x51, 0x4c, 0x54, 0x79, 0x70,
	0x65, 0x44, 0x75, 0x6d, 0x70, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x51, 0x4c, 0x54, 0x79,
	0x70, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x10, 0x11, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x51, 0x4c,
	0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x10, 0x12, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x10, 0x13, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x74, 0x10, 0x14, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x10,
	0x15, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x10, 0x16, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x51, 0x4c,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x10,
	0x17, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x44, 0x72, 0x6f, 0x70,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x18, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x51, 0x4c, 0x54, 0x79,
	0x70, 0x65, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x19, 0x12, 0x1b,
	0x0a, 0x17, 0x53, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x46,
	0x72, 0x6f, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x1a, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x10, 0x1b, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x1c, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x10, 0x1d, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x44, 0x72,
	0x6f, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x10, 0x1e, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x51, 0x4c,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x10, 0x1f, 0x42, 0x21, 0x5a, 0x1f, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x73,
	0x71, 0x6c, 0x2f, 0x75, 0x6e, 0x64, 0x6f, 0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_rawDescOnce sync.Once
	file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_rawDescData = file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_rawDesc
)

func file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_rawDescGZIP() []byte {
	file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_rawDescOnce.Do(func() {
		file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_rawDescData)
	})
	return file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_rawDescData
}

var file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_goTypes = []interface{}{
	(IndexType)(0),          // 0: parser.IndexType
	(JDBCType)(0),           // 1: parser.JDBCType
	(SQLType)(0),            // 2: parser.SQLType
	(*BranchUndoLog)(nil),   // 3: parser.BranchUndoLog
	(*SQLUndoLog)(nil),      // 4: parser.SQLUndoLog
	(*RecordImage)(nil),     // 5: parser.RecordImage
	(*RowImage)(nil),        // 6: parser.RowImage
	(*structpb.Struct)(nil), // 7: google.protobuf.Struct
}
var file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_depIdxs = []int32{
	4, // 0: parser.BranchUndoLog.Logs:type_name -> parser.SQLUndoLog
	2, // 1: parser.SQLUndoLog.SQLType:type_name -> parser.SQLType
	5, // 2: parser.SQLUndoLog.BeforeImage:type_name -> parser.RecordImage
	5, // 3: parser.SQLUndoLog.AfterImage:type_name -> parser.RecordImage
	2, // 4: parser.RecordImage.SQLType:type_name -> parser.SQLType
	6, // 5: parser.RecordImage.Rows:type_name -> parser.RowImage
	7, // 6: parser.RowImage.Columns:type_name -> google.protobuf.Struct
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_init() }
func file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_init() {
	if File_pkg_datasource_sql_undo_parser_branch_undo_log_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchUndoLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLUndoLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_goTypes,
		DependencyIndexes: file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_depIdxs,
		EnumInfos:         file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_enumTypes,
		MessageInfos:      file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_msgTypes,
	}.Build()
	File_pkg_datasource_sql_undo_parser_branch_undo_log_proto = out.File
	file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_rawDesc = nil
	file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_goTypes = nil
	file_pkg_datasource_sql_undo_parser_branch_undo_log_proto_depIdxs = nil
}
