//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v6.30.2
// source: transactionExceptionCode.proto

package transaction

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PublishRequest is a publish request.
type TransactionExceptionCodeProto int32

const (
	TransactionExceptionCodeProto_Unknown                           TransactionExceptionCodeProto = 0
	TransactionExceptionCodeProto_LockKeyConflict                   TransactionExceptionCodeProto = 1
	TransactionExceptionCodeProto_IO                                TransactionExceptionCodeProto = 2
	TransactionExceptionCodeProto_BranchRollbackFailed_Retriable    TransactionExceptionCodeProto = 3
	TransactionExceptionCodeProto_BranchRollbackFailed_Unretriable  TransactionExceptionCodeProto = 4
	TransactionExceptionCodeProto_BranchRegisterFailed              TransactionExceptionCodeProto = 5
	TransactionExceptionCodeProto_BranchReportFailed                TransactionExceptionCodeProto = 6
	TransactionExceptionCodeProto_LockableCheckFailed               TransactionExceptionCodeProto = 7
	TransactionExceptionCodeProto_BranchTransactionNotExist         TransactionExceptionCodeProto = 8
	TransactionExceptionCodeProto_GlobalTransactionNotExist         TransactionExceptionCodeProto = 9
	TransactionExceptionCodeProto_GlobalTransactionNotActive        TransactionExceptionCodeProto = 10
	TransactionExceptionCodeProto_GlobalTransactionStatusInvalid    TransactionExceptionCodeProto = 11
	TransactionExceptionCodeProto_FailedToSendBranchCommitRequest   TransactionExceptionCodeProto = 12
	TransactionExceptionCodeProto_FailedToSendBranchRollbackRequest TransactionExceptionCodeProto = 13
	TransactionExceptionCodeProto_FailedToAddBranch                 TransactionExceptionCodeProto = 14
	// *
	//
	//	Failed to lock global transaction exception code.
	TransactionExceptionCodeProto_FailedLockGlobalTranscation TransactionExceptionCodeProto = 15
	// *
	// FailedWriteSession
	TransactionExceptionCodeProto_FailedWriteSession TransactionExceptionCodeProto = 16
	// *
	// FailedStore
	TransactionExceptionCodeProto_FailedStore TransactionExceptionCodeProto = 17
)

// Enum value maps for TransactionExceptionCodeProto.
var (
	TransactionExceptionCodeProto_name = map[int32]string{
		0:  "Unknown",
		1:  "LockKeyConflict",
		2:  "IO",
		3:  "BranchRollbackFailed_Retriable",
		4:  "BranchRollbackFailed_Unretriable",
		5:  "BranchRegisterFailed",
		6:  "BranchReportFailed",
		7:  "LockableCheckFailed",
		8:  "BranchTransactionNotExist",
		9:  "GlobalTransactionNotExist",
		10: "GlobalTransactionNotActive",
		11: "GlobalTransactionStatusInvalid",
		12: "FailedToSendBranchCommitRequest",
		13: "FailedToSendBranchRollbackRequest",
		14: "FailedToAddBranch",
		15: "FailedLockGlobalTranscation",
		16: "FailedWriteSession",
		17: "FailedStore",
	}
	TransactionExceptionCodeProto_value = map[string]int32{
		"Unknown":                           0,
		"LockKeyConflict":                   1,
		"IO":                                2,
		"BranchRollbackFailed_Retriable":    3,
		"BranchRollbackFailed_Unretriable":  4,
		"BranchRegisterFailed":              5,
		"BranchReportFailed":                6,
		"LockableCheckFailed":               7,
		"BranchTransactionNotExist":         8,
		"GlobalTransactionNotExist":         9,
		"GlobalTransactionNotActive":        10,
		"GlobalTransactionStatusInvalid":    11,
		"FailedToSendBranchCommitRequest":   12,
		"FailedToSendBranchRollbackRequest": 13,
		"FailedToAddBranch":                 14,
		"FailedLockGlobalTranscation":       15,
		"FailedWriteSession":                16,
		"FailedStore":                       17,
	}
)

func (x TransactionExceptionCodeProto) Enum() *TransactionExceptionCodeProto {
	p := new(TransactionExceptionCodeProto)
	*p = x
	return p
}

func (x TransactionExceptionCodeProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionExceptionCodeProto) Descriptor() protoreflect.EnumDescriptor {
	return file_transactionExceptionCode_proto_enumTypes[0].Descriptor()
}

func (TransactionExceptionCodeProto) Type() protoreflect.EnumType {
	return &file_transactionExceptionCode_proto_enumTypes[0]
}

func (x TransactionExceptionCodeProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionExceptionCodeProto.Descriptor instead.
func (TransactionExceptionCodeProto) EnumDescriptor() ([]byte, []int) {
	return file_transactionExceptionCode_proto_rawDescGZIP(), []int{0}
}

var File_transactionExceptionCode_proto protoreflect.FileDescriptor

var file_transactionExceptionCode_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x22, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x73, 0x65, 0x61,
	0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2a, 0x8d, 0x04, 0x0a, 0x1d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4f, 0x10, 0x02,
	0x12, 0x22, 0x0a, 0x1e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x74, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x55, 0x6e, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13,
	0x4c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x10, 0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x0b, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x0c, 0x12, 0x25, 0x0a, 0x21,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x41,
	0x64, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x10, 0x11, 0x42, 0x45, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x61, 0x74, 0x61, 0x2f, 0x73, 0x65, 0x61, 0x74, 0x61, 0x2d, 0x67,
	0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x67,
	0x72, 0x70, 0x63, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_transactionExceptionCode_proto_rawDescOnce sync.Once
	file_transactionExceptionCode_proto_rawDescData = file_transactionExceptionCode_proto_rawDesc
)

func file_transactionExceptionCode_proto_rawDescGZIP() []byte {
	file_transactionExceptionCode_proto_rawDescOnce.Do(func() {
		file_transactionExceptionCode_proto_rawDescData = protoimpl.X.CompressGZIP(file_transactionExceptionCode_proto_rawDescData)
	})
	return file_transactionExceptionCode_proto_rawDescData
}

var file_transactionExceptionCode_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_transactionExceptionCode_proto_goTypes = []interface{}{
	(TransactionExceptionCodeProto)(0), // 0: org.apache.seata.protocol.protobuf.TransactionExceptionCodeProto
}
var file_transactionExceptionCode_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_transactionExceptionCode_proto_init() }
func file_transactionExceptionCode_proto_init() {
	if File_transactionExceptionCode_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transactionExceptionCode_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_transactionExceptionCode_proto_goTypes,
		DependencyIndexes: file_transactionExceptionCode_proto_depIdxs,
		EnumInfos:         file_transactionExceptionCode_proto_enumTypes,
	}.Build()
	File_transactionExceptionCode_proto = out.File
	file_transactionExceptionCode_proto_rawDesc = nil
	file_transactionExceptionCode_proto_goTypes = nil
	file_transactionExceptionCode_proto_depIdxs = nil
}
