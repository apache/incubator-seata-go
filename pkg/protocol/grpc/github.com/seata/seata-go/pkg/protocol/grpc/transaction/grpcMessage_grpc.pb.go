//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.30.2
// source: grpcMessage.proto

package transaction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SeataService_SendRequest_FullMethodName = "/org.apache.seata.protocol.protobuf.SeataService/sendRequest"
)

// SeataServiceClient is the client API for SeataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeataServiceClient interface {
	SendRequest(ctx context.Context, opts ...grpc.CallOption) (SeataService_SendRequestClient, error)
}

type seataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeataServiceClient(cc grpc.ClientConnInterface) SeataServiceClient {
	return &seataServiceClient{cc}
}

func (c *seataServiceClient) SendRequest(ctx context.Context, opts ...grpc.CallOption) (SeataService_SendRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &SeataService_ServiceDesc.Streams[0], SeataService_SendRequest_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &seataServiceSendRequestClient{stream}
	return x, nil
}

type SeataService_SendRequestClient interface {
	Send(*GrpcMessageProto) error
	Recv() (*GrpcMessageProto, error)
	grpc.ClientStream
}

type seataServiceSendRequestClient struct {
	grpc.ClientStream
}

func (x *seataServiceSendRequestClient) Send(m *GrpcMessageProto) error {
	return x.ClientStream.SendMsg(m)
}

func (x *seataServiceSendRequestClient) Recv() (*GrpcMessageProto, error) {
	m := new(GrpcMessageProto)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SeataServiceServer is the server API for SeataService service.
// All implementations must embed UnimplementedSeataServiceServer
// for forward compatibility
type SeataServiceServer interface {
	SendRequest(SeataService_SendRequestServer) error
	mustEmbedUnimplementedSeataServiceServer()
}

// UnimplementedSeataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSeataServiceServer struct {
}

func (UnimplementedSeataServiceServer) SendRequest(SeataService_SendRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method SendRequest not implemented")
}
func (UnimplementedSeataServiceServer) mustEmbedUnimplementedSeataServiceServer() {}

// UnsafeSeataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeataServiceServer will
// result in compilation errors.
type UnsafeSeataServiceServer interface {
	mustEmbedUnimplementedSeataServiceServer()
}

func RegisterSeataServiceServer(s grpc.ServiceRegistrar, srv SeataServiceServer) {
	s.RegisterService(&SeataService_ServiceDesc, srv)
}

func _SeataService_SendRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SeataServiceServer).SendRequest(&seataServiceSendRequestServer{stream})
}

type SeataService_SendRequestServer interface {
	Send(*GrpcMessageProto) error
	Recv() (*GrpcMessageProto, error)
	grpc.ServerStream
}

type seataServiceSendRequestServer struct {
	grpc.ServerStream
}

func (x *seataServiceSendRequestServer) Send(m *GrpcMessageProto) error {
	return x.ServerStream.SendMsg(m)
}

func (x *seataServiceSendRequestServer) Recv() (*GrpcMessageProto, error) {
	m := new(GrpcMessageProto)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SeataService_ServiceDesc is the grpc.ServiceDesc for SeataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.apache.seata.protocol.protobuf.SeataService",
	HandlerType: (*SeataServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "sendRequest",
			Handler:       _SeataService_SendRequest_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpcMessage.proto",
}
