// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/tc/server/global_session_locker.go

// Package mock_server is a generated GoMock package.
package mock_server

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	apis "github.com/opentrx/seata-golang/v2/pkg/apis"
)

// MockGlobalSessionLocker is a mock of GlobalSessionLocker interface.
type MockGlobalSessionLocker struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalSessionLockerMockRecorder
}

// MockGlobalSessionLockerMockRecorder is the mock recorder for MockGlobalSessionLocker.
type MockGlobalSessionLockerMockRecorder struct {
	mock *MockGlobalSessionLocker
}

// NewMockGlobalSessionLocker creates a new mock instance.
func NewMockGlobalSessionLocker(ctrl *gomock.Controller) *MockGlobalSessionLocker {
	mock := &MockGlobalSessionLocker{ctrl: ctrl}
	mock.recorder = &MockGlobalSessionLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlobalSessionLocker) EXPECT() *MockGlobalSessionLockerMockRecorder {
	return m.recorder
}

// TryLock mocks base method.
func (m *MockGlobalSessionLocker) TryLock(session *apis.GlobalSession, timeout time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryLock", session, timeout)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryLock indicates an expected call of TryLock.
func (mr *MockGlobalSessionLockerMockRecorder) TryLock(session, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryLock", reflect.TypeOf((*MockGlobalSessionLocker)(nil).TryLock), session, timeout)
}

// Unlock mocks base method.
func (m *MockGlobalSessionLocker) Unlock(session *apis.GlobalSession) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock", session)
}

// Unlock indicates an expected call of Unlock.
func (mr *MockGlobalSessionLockerMockRecorder) Unlock(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockGlobalSessionLocker)(nil).Unlock), session)
}
