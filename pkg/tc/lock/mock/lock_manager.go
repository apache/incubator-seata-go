// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/tc/lock/lock_manager.go

// Package mock_lock is a generated GoMock package.
package mock_lock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	apis "github.com/opentrx/seata-golang/v2/pkg/apis"
	model "github.com/opentrx/seata-golang/v2/pkg/tc/model"
)

// MockLockManagerInterface is a mock of LockManagerInterface interface.
type MockLockManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLockManagerInterfaceMockRecorder
}

// MockLockManagerInterfaceMockRecorder is the mock recorder for MockLockManagerInterface.
type MockLockManagerInterfaceMockRecorder struct {
	mock *MockLockManagerInterface
}

// NewMockLockManagerInterface creates a new mock instance.
func NewMockLockManagerInterface(ctrl *gomock.Controller) *MockLockManagerInterface {
	mock := &MockLockManagerInterface{ctrl: ctrl}
	mock.recorder = &MockLockManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLockManagerInterface) EXPECT() *MockLockManagerInterfaceMockRecorder {
	return m.recorder
}

// AcquireLock mocks base method.
func (m *MockLockManagerInterface) AcquireLock(branchSession *apis.BranchSession) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireLock", branchSession)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AcquireLock indicates an expected call of AcquireLock.
func (mr *MockLockManagerInterfaceMockRecorder) AcquireLock(branchSession interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireLock", reflect.TypeOf((*MockLockManagerInterface)(nil).AcquireLock), branchSession)
}

// ReleaseLock mocks base method.
func (m *MockLockManagerInterface) ReleaseLock(branchSession *apis.BranchSession) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseLock", branchSession)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ReleaseLock indicates an expected call of ReleaseLock.
func (mr *MockLockManagerInterfaceMockRecorder) ReleaseLock(branchSession interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseLock", reflect.TypeOf((*MockLockManagerInterface)(nil).ReleaseLock), branchSession)
}

// ReleaseGlobalSessionLock mocks base method.
func (m *MockLockManagerInterface) ReleaseGlobalSessionLock(globalTransaction *model.GlobalTransaction) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseGlobalSessionLock", globalTransaction)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ReleaseGlobalSessionLock indicates an expected call of ReleaseGlobalSessionLock.
func (mr *MockLockManagerInterfaceMockRecorder) ReleaseGlobalSessionLock(globalTransaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseGlobalSessionLock", reflect.TypeOf((*MockLockManagerInterface)(nil).ReleaseGlobalSessionLock), globalTransaction)
}

// IsLockable mocks base method.
func (m *MockLockManagerInterface) IsLockable(xid, resourceID, lockKey string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLockable", xid, resourceID, lockKey)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLockable indicates an expected call of IsLockable.
func (mr *MockLockManagerInterfaceMockRecorder) IsLockable(xid, resourceID, lockKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLockable", reflect.TypeOf((*MockLockManagerInterface)(nil).IsLockable), xid, resourceID, lockKey)
}
