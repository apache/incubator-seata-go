// Code generated by MockGen. DO NOT EDIT.
// Source: ./mock/test_nacos_client.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/nacos-group/nacos-sdk-go/v2/model"
	vo "github.com/nacos-group/nacos-sdk-go/v2/vo"
)

// MockNacosClient is a mock of NacosClient interface.
type MockNacosClient struct {
	ctrl     *gomock.Controller
	recorder *MockNacosClientMockRecorder
}

// MockNacosClientMockRecorder is the mock recorder for MockNacosClient.
type MockNacosClientMockRecorder struct {
	mock *MockNacosClient
}

// NewMockNacosClient creates a new mock instance.
func NewMockNacosClient(ctrl *gomock.Controller) *MockNacosClient {
	mock := &MockNacosClient{ctrl: ctrl}
	mock.recorder = &MockNacosClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNacosClient) EXPECT() *MockNacosClientMockRecorder {
	return m.recorder
}

// CloseClient mocks base method.
func (m *MockNacosClient) CloseClient() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseClient")
}

// CloseClient indicates an expected call of CloseClient.
func (mr *MockNacosClientMockRecorder) CloseClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseClient", reflect.TypeOf((*MockNacosClient)(nil).CloseClient))
}

// DeregisterInstance mocks base method.
func (m *MockNacosClient) DeregisterInstance(param vo.DeregisterInstanceParam) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterInstance", param)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterInstance indicates an expected call of DeregisterInstance.
func (mr *MockNacosClientMockRecorder) DeregisterInstance(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterInstance", reflect.TypeOf((*MockNacosClient)(nil).DeregisterInstance), param)
}

// GetAllServicesInfo mocks base method.
func (m *MockNacosClient) GetAllServicesInfo(param vo.GetAllServiceInfoParam) (model.ServiceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllServicesInfo", param)
	ret0, _ := ret[0].(model.ServiceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllServicesInfo indicates an expected call of GetAllServicesInfo.
func (mr *MockNacosClientMockRecorder) GetAllServicesInfo(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllServicesInfo", reflect.TypeOf((*MockNacosClient)(nil).GetAllServicesInfo), param)
}

// GetService mocks base method.
func (m *MockNacosClient) GetService(param vo.GetServiceParam) (model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", param)
	ret0, _ := ret[0].(model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockNacosClientMockRecorder) GetService(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockNacosClient)(nil).GetService), param)
}

// RegisterInstance mocks base method.
func (m *MockNacosClient) RegisterInstance(param vo.RegisterInstanceParam) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterInstance", param)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterInstance indicates an expected call of RegisterInstance.
func (mr *MockNacosClientMockRecorder) RegisterInstance(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInstance", reflect.TypeOf((*MockNacosClient)(nil).RegisterInstance), param)
}

// SelectAllInstances mocks base method.
func (m *MockNacosClient) SelectAllInstances(param vo.SelectAllInstancesParam) ([]model.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllInstances", param)
	ret0, _ := ret[0].([]model.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllInstances indicates an expected call of SelectAllInstances.
func (mr *MockNacosClientMockRecorder) SelectAllInstances(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllInstances", reflect.TypeOf((*MockNacosClient)(nil).SelectAllInstances), param)
}

// SelectInstances mocks base method.
func (m *MockNacosClient) SelectInstances(param vo.SelectInstancesParam) ([]model.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectInstances", param)
	ret0, _ := ret[0].([]model.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectInstances indicates an expected call of SelectInstances.
func (mr *MockNacosClientMockRecorder) SelectInstances(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectInstances", reflect.TypeOf((*MockNacosClient)(nil).SelectInstances), param)
}

// SelectOneHealthyInstance mocks base method.
func (m *MockNacosClient) SelectOneHealthyInstance(param vo.SelectOneHealthInstanceParam) (*model.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectOneHealthyInstance", param)
	ret0, _ := ret[0].(*model.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectOneHealthyInstance indicates an expected call of SelectOneHealthyInstance.
func (mr *MockNacosClientMockRecorder) SelectOneHealthyInstance(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectOneHealthyInstance", reflect.TypeOf((*MockNacosClient)(nil).SelectOneHealthyInstance), param)
}

// Subscribe mocks base method.
func (m *MockNacosClient) Subscribe(param *vo.SubscribeParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", param)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockNacosClientMockRecorder) Subscribe(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockNacosClient)(nil).Subscribe), param)
}

// Unsubscribe mocks base method.
func (m *MockNacosClient) Unsubscribe(param *vo.SubscribeParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", param)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockNacosClientMockRecorder) Unsubscribe(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockNacosClient)(nil).Unsubscribe), param)
}

// UpdateInstance mocks base method.
func (m *MockNacosClient) UpdateInstance(param vo.UpdateInstanceParam) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstance", param)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstance indicates an expected call of UpdateInstance.
func (mr *MockNacosClientMockRecorder) UpdateInstance(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstance", reflect.TypeOf((*MockNacosClient)(nil).UpdateInstance), param)
}
