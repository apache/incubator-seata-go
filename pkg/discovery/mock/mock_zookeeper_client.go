/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: test_etcd_client.go

// Package mock is a generated GoMock package.

// Code generated by MockGen. DO NOT EDIT.
// Source: test_zookeeper_client.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	zk "github.com/go-zookeeper/zk"
	gomock "github.com/golang/mock/gomock"
)

// MockZkConnInterface is a mock of ZkConnInterface interface.
type MockZkConnInterface struct {
	ctrl     *gomock.Controller
	recorder *MockZkConnInterfaceMockRecorder
}

// MockZkConnInterfaceMockRecorder is the mock recorder for MockZkConnInterface.
type MockZkConnInterfaceMockRecorder struct {
	mock *MockZkConnInterface
}

// NewMockZkConnInterface creates a new mock instance.
func NewMockZkConnInterface(ctrl *gomock.Controller) *MockZkConnInterface {
	mock := &MockZkConnInterface{ctrl: ctrl}
	mock.recorder = &MockZkConnInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZkConnInterface) EXPECT() *MockZkConnInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockZkConnInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockZkConnInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockZkConnInterface)(nil).Close))
}

// Get mocks base method.
func (m *MockZkConnInterface) Get(path string) ([]byte, *zk.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*zk.Stat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockZkConnInterfaceMockRecorder) Get(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockZkConnInterface)(nil).Get), path)
}

// GetW mocks base method.
func (m *MockZkConnInterface) GetW(path string) ([]byte, *zk.Stat, <-chan zk.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetW", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*zk.Stat)
	ret2, _ := ret[2].(<-chan zk.Event)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetW indicates an expected call of GetW.
func (mr *MockZkConnInterfaceMockRecorder) GetW(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetW", reflect.TypeOf((*MockZkConnInterface)(nil).GetW), path)
}
